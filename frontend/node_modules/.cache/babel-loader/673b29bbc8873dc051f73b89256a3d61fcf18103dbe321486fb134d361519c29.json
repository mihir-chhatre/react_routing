{"ast":null,"code":"var _jsxFileName = \"/Users/mihirchhatre/Documents/Projects/react_routing/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { defer, json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message: 'Count not fetch events'}), {status: 500})\n    throw json({\n      message: 'Count not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["defer","json","useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","events","children","Await","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/mihirchhatre/Documents/Projects/react_routing/frontend/src/pages/Events.js"],"sourcesContent":["import { defer, json, useLoaderData } from \"react-router-dom\";\n\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const {events} = useLoaderData();\n  \n  return (\n    <>\n      <Await resolve={events}/>\n    </>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message: 'Count not fetch events'}), {status: 500})\n    throw json({\n      message: 'Count not fetch events'\n    }, {\n      status: 500\n    })\n  } else {\n    return response\n  }\n}\n\nexport function loader() {\n  defer({\n    events: loadEvents()\n  })\n}\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAE7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGR,aAAa,EAAE;EAEhC,oBACEG,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACEN,OAAA,CAACO,KAAK;MAACC,OAAO,EAAEH;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE,iBACxB;AAEP;AAACR,EAAA,CARQD,UAAU;EAAA,QACAN,aAAa;AAAA;AAAAgB,EAAA,GADvBV,UAAU;AAUnB,eAAeA,UAAU;AAEzB,eAAeW,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAMrB,IAAI,CAAC;MACTsB,OAAO,EAAE;IACX,CAAC,EAAE;MACDC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvBzB,KAAK,CAAC;IACJU,MAAM,EAAES,UAAU;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}